package authenticationServer;

import registrar.ModelRegister;
import systemUserOperations.LoginOptions;
import systemUsers.SystemUserModel;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import authenticatedUsers.LoggedInAuthenticatedUser;
import authenticationServer.sessionGenerator;
import customDatatypes.SystemState;
import loggedInUserFactory.LoggedInUserFactory;

/**
 * This class handles to system login protocol of the system. It performs checks
 * to confirm the presence of user in the register and initializes an
 * AuthenticationToken for the user logging in.
 * 
 * @author G30
 *
 */
public class LoginAuthentication {

	private static Map<Integer, String> userSessions = new HashMap<Integer, String>();

	/**
	 * This is the interactive interface for users to log into the system. It has a
	 * welcome banner and a login acceptor for user ID's
	 * 
	 * @throws IOException
	 */
	public static void interact() throws IOException {

		// Welcome Interface:
		System.out.println(" ----------------- Welcome To ----------------- \n"
				+ " ___   ___         ___   ___   ___              \n"
				+ "|     |   | |   | |   | |     |     |   | |\\ /| \n"
				+ "|     |   | |   | |-+-   -+-  |-+-  |   | | + | \n"
				+ "|     |   | |   | |  \\      | |     |   | |   | \n"
				+ " ---   ---   ---         ---   ---   ---        \n");

		BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));

		String id;

		// Query user for personal information (ID will do)
		System.out.println("Please Provide Your Login ID:");

		while (true) {
			// read from console
			id = scan.readLine();

			// check for user presence. break loop and continue if id verified
			if (!ModelRegister.getInstance().checkIfUserHasAlreadyBeenCreated(id)) {
				System.out.println("Error: User ID not correct. Please try again with a valid ID:");
				continue;
			} else {
				break;
			}
		}

		// Authenticate the ID provided
		AuthenticationToken certifiedToken = authenticate(id);

		if (certifiedToken != null) {
			// Create new factory and logs user in to system
			LoggedInUserFactory loginFactory = new LoggedInUserFactory();
			LoggedInAuthenticatedUser user = loginFactory.createAuthenticatedUser(certifiedToken);
			userSessions.put(certifiedToken.getSessionID(), id);

			// Display User Options to user to use
			LoginOptions.screen(user);
		}
	}

	/**
	 * this method checks if id provided is in the register, then checks for system
	 * status to generate a token for login purposes
	 * 
	 * @param userID
	 *            the id of the user who is attempting log in
	 * @return
	 * @return an {@link AuthenticationToken} that for the user if: a) user is
	 *         admin, or b) if system is online for any other user type. Otherwise
	 *         it returns a null with a error message to console
	 */
	public static AuthenticationToken authenticate(String userID) {

		if (!ModelRegister.getInstance().checkIfUserHasAlreadyBeenCreated(userID)) {
			System.out.println("Error: Login Failed, System is offline");
			return null;
		} else {
			SystemUserModel loginUser = ModelRegister.getInstance().getRegisteredUser(userID);

			// when system has not started
			if (SystemState.getState() == 0) {
				if (loginUser.getType().equals("admin"))
					return generateToken(loginUser);
				else {
					System.out.println("Error: Login Failed, System is offline");
					return null;
				}
			} else { // system is online
				return generateToken(loginUser);
			}
		}

	}

	/**
	 * Creates an {@link AuthenticationToken} for the user provided. TokenID is the
	 * userId, SessionID is generated by {@link sessionGenerator}, where the first
	 * digit indicates the user type
	 * 
	 * @param user
	 *            an {@link SystemUserModel} object of the user of interest
	 * @return an {@link AuthenticationToken} for the user.
	 */
	private static AuthenticationToken generateToken(SystemUserModel user) {
		AuthenticationToken userToken = new AuthenticationToken();
		userToken.setUserType(user.getType());
		userToken.setTokenID(user.getID());
		int sessionCode = sessionGenerator.createSession();
		if (userToken.getUserType().equals("admin"))
			sessionCode += 1000;
		else if (userToken.getUserType().equals("instructor"))
			sessionCode += 2000;
		else // is a student
			sessionCode += 3000;

		userToken.setSessionID(sessionCode);

		return userToken;

	}

	/**
	 * Returns the user ID of associated with the supplied session ID
	 * 
	 * @param sessionID
	 *            the id of the session of interest
	 * @return
	 */
	public static String getSessionUser(Integer sessionID) {
		return userSessions.get(sessionID);
	}

	/**
	 * Logs the user that that corresponds to the session ID provided
	 * @param sessionID ID of the current active session 
	 * @throws IOException
	 */
	public static void logout(Integer sessionID) throws IOException {
		// retrieve user object
		LoggedInAuthenticatedUser user = ModelRegister.getInstance().getLoggedInUser(sessionID);

		// de-register user from active
		ModelRegister.getInstance().LogOutUser(sessionID);

		// call login screen again
		interact();

	}

}
